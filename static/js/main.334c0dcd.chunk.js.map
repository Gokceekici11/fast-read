{"version":3,"sources":["utils/theme.js","App.style.js","containers/InsertArticle/InsertArticle.styled.js","containers/InsertArticle/InsertArticle.js","App.js","serviceWorker.js","index.js"],"names":["colors","AppWrapper","styled","div","Header","Content","InsertArticleWrapper","TextArea","textarea","article","injectIntl","intl","useState","setArticle","placeholder","formatMessage","id","onChange","value","target","App","Boolean","window","location","hostname","match","messages","messages_tr","messages_en","language","navigator","split","ReactDOM","render","locale","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"miBAAaA,EACI,UADJA,EAEQ,UAFRA,EAGA,UAHAA,EAIA,U,ylBCAN,IAAMC,EAAaC,IAAOC,IAAV,KAOVC,EAASF,IAAOC,IAAV,IAIKH,EAKJA,GAGPK,EAAUH,IAAOC,IAAV,K,mpBCnBb,IAAMG,EAAuBJ,IAAOC,IAAV,KASpBI,EAAWL,IAAOM,SAAV,IACDR,GAOF,qBAAGS,QAAwB,OAAS,YACnC,qBAAGA,QAAwB,OAAS,WACrC,qBAAGA,QAAwBT,EAAiBA,KCA/CU,eAjBO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACFC,mBAAS,IADP,mBACzBH,EADyB,KAChBI,EADgB,KAE1BC,EAAcH,EAAKI,cAAc,CAAEC,GAAI,8BAK7C,OACI,kBAACV,EAAD,KACI,kBAACC,EAAD,CACIU,SANgB,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MACrCL,EAAWK,IAMHT,QAASA,EACTK,YAAaA,QCCdM,MAbf,WACE,OACE,kBAACnB,EAAD,KACE,kBAACG,EAAD,KACE,kBAAC,IAAD,CAAkBY,GAAG,aAEvB,kBAACX,EAAD,KACE,kBAAC,EAAD,SCDYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAW,CACb,GAAMC,EACN,GAAMC,GAGJC,EAAWC,UAAUD,SAASE,MAAM,QAAQ,GAElDC,IAASC,OACL,kBAAC,IAAD,CAAcC,OAAQJ,UAAUD,SAAUH,SAAUA,EAASG,IACzD,kBAAC,EAAD,OACaM,SAASC,eAAe,SD6GvC,kBAAmBN,WACrBA,UAAUO,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.334c0dcd.chunk.js","sourcesContent":["export const colors = {\n    purpleColor: \"#E1D5E7\",\n    purpleDarkColor: \"#9673A6\",\n    tundora: \"#4D4D4D\",\n    codGray: \"#1A1A1A\",\n}\n","import styled from 'styled-components'\n\nimport { colors } from 'utils'\n\nexport const AppWrapper = styled.div`\n    display: flex;\n    flex-flow: column;\n    width: 100%;\n    height: inherit;\n`;\n\nexport const Header = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: ${colors.purpleColor};\n    height:50px;\n    font-weight: bold;\n    border-style: solid;\n    border-width: 1px;\n    border-color: ${colors.purpleDarkColor};\n`;\n\nexport const Content = styled.div`\n    display: flex;\n    flex-grow : 1;\n    flex-flow: column;\n    padding: 20px;\n`;\n","import styled from 'styled-components'\n\nimport { colors } from 'utils'\n\nexport const InsertArticleWrapper = styled.div`\n    display: flex;\n    flex-flow: column;\n    flex-grow: 1;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const TextArea = styled.textarea`\n    border-color: ${colors.purpleDarkColor};\n    border-width: 1px;\n    border-radius: 20px;\n    height: 340px;\n    width: 720px;\n    font-size: 16px;\n    padding: 20px;\n    text-align: ${({ article }) => article ? 'left' : 'center'};\n    line-height: ${({ article }) => article ? '18px' : '340px'};\n    font-color: ${({ article }) => article ? colors.codGray : colors.tundora}\n\n    &: focus {\n        text-align: left;\n        line-height: 18px;\n    }\n\n    @media (max-width: 720px) {\n        width: 80%;\n    }\n`","import React, { useState } from 'react'\nimport { injectIntl, FormattedMessage} from 'react-intl';\n\n\nimport { TextArea, InsertArticleWrapper } from './InsertArticle.styled'\n\nconst InsertArticle = ({ intl }) => {\n    const [article, setArticle] = useState('');\n    const placeholder = intl.formatMessage({ id: 'insertArticle.placeholder' });\n\n    const handleChangeArticle = ({ target: { value } }) => {\n        setArticle(value)\n    }\n    return (\n        <InsertArticleWrapper>\n            <TextArea\n                onChange={handleChangeArticle}\n                article={article}\n                placeholder={placeholder} />\n        </InsertArticleWrapper>\n    )\n}\n\nexport default injectIntl(InsertArticle);","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { AppWrapper, Header, Content } from './App.style'\nimport InsertArticle from 'containers/InsertArticle/InsertArticle'\n\nfunction App() {\n  return (\n    <AppWrapper >\n      <Header>\n        <FormattedMessage id='appName' />\n      </Header>\n      <Content>\n        <InsertArticle />\n      </Content>\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { IntlProvider } from 'react-intl';\n\nimport messages_en from 'translations/en.json'\nimport messages_tr from 'translations/tr.json'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst messages = {\n    'tr': messages_tr,\n    'en': messages_en\n};\n\nconst language = navigator.language.split(/[-_]/)[0];\n\nReactDOM.render(\n    <IntlProvider locale={navigator.language} messages={messages[language]}>\n        <App />\n    </IntlProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}