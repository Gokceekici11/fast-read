{"version":3,"sources":["containers/InsertArticle/reducer.js","containers/ReadArticle/reducer.js","reducers.js","containers/InsertArticle/constants.js","containers/ReadArticle/const.js","utils/theme.js","App.style.js","components/Button/styled.js","components/Layouts/index.js","components/Button/index.js","components/Icons/index.js","containers/InsertArticle/styled.js","containers/InsertArticle/index.js","containers/InsertArticle/action.js","components/Badge/styled.js","components/Badge/index.js","containers/ReadArticle/styled.js","containers/ReadArticle/index.js","containers/ReadArticle/action.js","App.js","serviceWorker.js","index.js"],"names":["initialState","markedWordList","readWordList","reducers","combineReducers","articleList","state","action","type","Object","assign","id","article","numberOfPage","wordList","wordLists","word","colors","deviceSizes","AppWrapper","styled","div","Header","Content","ButtonWrapper","height","width","tWidth","mWidth","Margin","margin","top","bottom","right","left","TextWrapper","padding","fontSize","fontColor","PageWrapper","flexStart","flexEnd","Button","children","leftIcon","rightIcon","rest","Arrow","fill","rotate","style","transform","clipRule","d","TextArea","textarea","connect","dispatch","insertArticle","tooLongWord","split","map","length","Math","ceil","uid","insertAticle","injectIntl","intl","useState","setArticle","placeholder","formatMessage","tooLongWordMsg","onChange","value","target","to","onClick","BadgeWrapper","color","Badge","ArticleWrapper","ParagraphWrapper","markWord","readWord","currentParagraph","setCurrentParagraph","articleId","useParams","filteredList","find","head","last","window","location","href","currentWordList","chunk","isMarked","lowerWord","lowerCase","indexOf","isReadWord","stepNumber","Array","index","key","markWordWithFilter","forEach","App","path","component","ReadArticle","InsertArticle","Boolean","hostname","match","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","messages","messages_tr","messages_en","language","navigator","ReactDOM","render","locale","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73827efb.chunk.js","sourcesContent":["import { INSERT_ARTICLE } from './constants'\n\nconst initialState = []\n\nexport const articleList = (state = initialState, action) => {\n    switch (action.type) {\n        case INSERT_ARTICLE:\n            return Object.assign([], state,\n                [\n                    ...state,\n                    {\n                        id: action.article.id,\n                        numberOfPage: action.article.numberOfPage,\n                        wordList: action.article.wordList,\n                    }\n                ])\n        default:\n            return state;\n    }\n}","import { MARK_WORD, READ_WORD } from \"./const\"\n\nconst initialState = {\n    markedWordList: [],\n    readWordList: [],\n}\n\nexport const wordLists = (state = initialState, action) => {\n    switch (action.type) {\n        case MARK_WORD:\n            return { ...state, markedWordList: [...state.markedWordList, action.word]}\n        case READ_WORD:\n            return { ...state, readWordList: [...state.readWordList, action.word] }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux'\n\nimport { articleList } from './containers/InsertArticle/reducer'\nimport { wordLists } from './containers/ReadArticle/reducer'\n\nconst reducers = combineReducers({\n    articleList,\n    wordLists\n})\n\nexport default reducers\n","export const INSERT_ARTICLE = 'INSERT_ARTICLE'\n","export const MARK_WORD = 'MARK_WORD'\nexport const READ_WORD = 'READ_WORD'\n","export const colors = {\n    purpleColor: \"#E1D5E7\",\n    purpleDarkColor: \"#9673A6\",\n    tundora: \"#4D4D4D\",\n    codGray: \"#1A1A1A\",\n    chelseaCucumber: \"#82B366\",\n    alabasterapprox: \"#FBFBFB\",\n    white: \"#FFFFFF\",\n    guardsmanRed: \"#CC0000\",\n    success: \"#D5E8D4\"\n}\n\nexport const deviceSizes = {\n    largeTablet: \"991px\",\n    tablet: \"767px\",\n    mobile: \"479px\",\n}\n","import styled from 'styled-components'\n\nimport { colors } from 'utils'\n\nexport const AppWrapper = styled.div`\n    display: flex;\n    flex-flow: column;\n    width: 100%;\n    height: inherit;\n`;\n\nexport const Header = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: ${colors.purpleColor};\n    height:50px;\n    font-weight: bold;\n    border-style: solid;\n    border-width: 1px;\n    border-color: ${colors.purpleDarkColor};\n`;\n\nexport const Content = styled.div`\n    display: flex;\n    flex-grow : 1;\n    flex-flow: column;\n    padding: 20px;\n`;\n","import styled from 'styled-components'\n\nimport { colors, deviceSizes } from 'utils'\n\nexport const ButtonWrapper = styled.div`\n    border-color: ${colors.purpleDarkColor};\n    border-width: 2px;\n    border-radius: 20px;\n    border-style: solid;\n    background-color: ${colors.white};\n    display: flex;\n    flex-flow: row;\n    align-items: center;\n    justify-content: space-between;\n    cursor: pointer;\n    \n    ${({height}) => height && `height: ${height}px`};\n    ${({width}) => width && `width: ${width}px`};\n    @media (max-width: ${deviceSizes.tablet}) {\n        ${({tWidth}) => tWidth && `width: ${tWidth}px`};\n    }\n    \n    @media (max-width: ${deviceSizes.mobile}) {\n        ${({mWidth}) => mWidth && `width: ${mWidth}px`};\n    }\n\n    :hover {\n        background-color: ${colors.alabasterapprox};\n    }\n`\n\n","import styled from 'styled-components'\n\nimport { colors } from 'utils'\n\nexport const Margin = styled.div`\n    ${({ margin }) => margin && `margin: ${margin}px`}\n    ${({ top }) => top && `margin-top: ${top}px`}\n    ${({ bottom }) => bottom && `margin-bottom: ${bottom}px`}\n    ${({ right }) => right && `margin-right: ${right}px`}\n    ${({ left }) => left && `margin-left: ${left}px`}\n`\n\nexport const Padding = styled.div`\n    ${({ padding }) => padding && `padding: ${padding}px`}\n    ${({ top }) => top && `padding-top: ${top}px;`}\n    ${({ bottom }) => bottom && `padding-bottom: ${bottom}px;`}\n    ${({ right }) => right && `padding-right: ${right}px;`}\n    ${({ left }) => left && `padding-left: ${left}px;`}\n`\n\nexport const TextWrapper = styled.div`\n    color: ${colors.codGray};\n    ${({ fontSize }) => fontSize && `font-size: ${fontSize}px;`}\n    ${({ fontColor }) => fontColor && `color: ${fontColor};`}\n`\n\nexport const PageWrapper = styled.div`\n    display: flex;\n    flex-flow: column;\n    flex-grow: 1;\n    width: 100%;\n    justify-content: center;\n    ${({ flexStart }) => flexStart && `justify-content: flex-start;`}\n    ${({ flexEnd }) => flexEnd && `justify-content: flex-end;`}\n    align-items: center;\n`;\n","import React from 'react'\n\nimport { ButtonWrapper } from './styled'\nimport { TextWrapper, Margin } from 'components/Layouts';\n\nconst Button = ({ children, leftIcon, rightIcon , ...rest}) => {\n    return (\n        <ButtonWrapper {...rest}>\n            <Margin left=\"4\">\n                {leftIcon}\n            </Margin>\n            <TextWrapper fontSize=\"20\">\n                {children}\n            </TextWrapper>\n            <Margin right=\"4\">\n                {rightIcon}\n            </Margin>\n        </ButtonWrapper>\n    )\n}\n\nexport default Button\n","import React from 'react'\n\nimport { colors } from 'utils/theme'\n\nexport const Circle = ({\n    fill = colors.white,\n    color = colors.tundora,\n    r=12\n    }) =>{\n    const cXY = r+1;\n    const heightWidth = cXY * 2;\n\n    return(\n        <svg height={heightWidth} width={heightWidth}>\n            <circle stroke={color} strokeWidth=\"2\" fill=\"transparent\"  cx={cXY} cy={cXY} r={r}/>\n        </svg>\n    )\n}\n\nexport const Here = ({ fill = colors.purpleDarkColor, width = 24, height = 32 }) =>{\n    return (\n        <svg width={width} height={height}>\n            <g id=\"Icons\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g id=\"Rounded\" transform=\"translate(-377.000000, -1306.000000)\">\n                    <g id=\"Communication\" transform=\"translate(100.000000, 1162.000000)\">\n                        <g id=\"-Round-/-Communication-/-location_on\" transform=\"translate(272.000000, 142.000000)\">\n                            <g>\n                                <polygon id=\"Path\" points=\"0 0 24 0 24 24 0 24\"></polygon>\n                                <path d=\"M12,2 C8.13,2 5,5.13 5,9 C5,13.17 9.42,18.92 11.24,21.11 C11.64,21.59 12.37,21.59 12.77,21.11 C14.58,18.92 19,13.17 19,9 C19,5.13 15.87,2 12,2 Z M12,11.5 C10.62,11.5 9.5,10.38 9.5,9 C9.5,7.62 10.62,6.5 12,6.5 C13.38,6.5 14.5,7.62 14.5,9 C14.5,10.38 13.38,11.5 12,11.5 Z\" id=\"🔹Icon-Color\" fill={fill}></path>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </g>\n</svg>\n\n    )\n}\n\nexport const Check = ({ color = colors.success, width = 24, height = 24 }) => {\n    return(\n        <svg width={width} height={height} fill=\"none\" stroke={color} strokeWidth=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-check-circle\">\n            <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n            <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n        </svg>\n    )\n}\n\nexport const Arrow = ({ fill = '#121313', width = 35, height = 32, right, left }) => {\n    const rotate = (right && 0) || (left && 180) || 0;\n    return(\n        <svg width={width} height={height} fill={fill} style={{transform:`rotate(${rotate}deg)`}} >\n            <path clipRule='evenodd' d=\"M31.705,15.284L31.705,15.284L31.705,15.284\n                 l-9.97-9.991c-0.634-0.66-1.748-0.162-1.723,0.734v4.976C20.008,11.002,20.004,11,20,11H1c-0.55,0-1,0.45-1,1v8c0,0.55,0.45,1,1,1\n                 h19c0.004,0,0.008-0.002,0.012-0.002v4.972c-0.024,0.892,1.082,1.376,1.715,0.742l9.977-9.999\n                 C32.098,16.318,32.098,15.678,31.705,15.284z M22.017,23.564V19H22h-1h-0.988v0.002C20.008,19.002,20.004,19,20,19h-1H2v-6h17h1\n                 c0.004,0,0.008-0.002,0.012-0.002V13H21h1h0.017V8.432l7.55,7.566L22.017,23.564z\"/>\n            <g /><g /><g /><g /><g /><g />\n        </svg>\n    )\n}\n","import styled from 'styled-components'\n\nimport { colors, deviceSizes } from 'utils'\n\nexport const TextArea = styled.textarea`\n    border-color: ${colors.purpleDarkColor};\n    border-width: 1px;\n    border-radius: 20px;\n    height: 340px;\n    font-size: 16px;\n    padding: 10px;\n    text-align: ${({ article }) => article ? 'left' : 'center'};\n    line-height: ${({ article }) => article ? '18px' : '340px'};\n    font-color: ${({ article }) => article ? colors.codGray : colors.tundora}\n\n    &: focus {\n        text-align: left;\n        line-height: 18px;\n    }\n\n    width: 720px;\n\n    @media (max-width: ${deviceSizes.tablet}) {\n        width: 450px;\n    }\n    @media (max-width: ${deviceSizes.mobile}) {\n        width: 290px;\n    }\n`\n","import React, { useState } from 'react'\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Link } from \"react-router-dom\";\nimport { connect } from 'react-redux'\n\nimport Button from 'components/Button';\nimport { Margin, PageWrapper } from 'components/Layouts';\nimport { Arrow } from 'components/Icons';\nimport { TextArea } from './styled'\n\nimport { colors } from 'utils';\nimport { insertAticle } from './action';\n\nconst InsertArticle = ({ intl, insertArticle }) => {\n    const [article, setArticle] = useState('');\n    const placeholder = intl.formatMessage({ id: 'insertArticle.placeholder' });\n    const tooLongWordMsg = intl.formatMessage({ id: 'insertArticle.action.tooLongWord' });\n\n    const handleChangeArticle = ({ target: { value } }) => {\n        setArticle(value)\n    }\n    return (\n        <PageWrapper>\n            <TextArea\n                onChange={handleChangeArticle}\n                article={article}\n                placeholder={placeholder} />\n            <Margin top=\"16\">\n                <Link to=\"/read\">\n                    <Button\n                        height=\"50\"\n                        width=\"740\"\n                        tWidth=\"470\"\n                        mWidth=\"310\"\n                        onClick={() => insertArticle(article, tooLongWordMsg)}\n                        rightIcon={<Arrow fill={colors.chelseaCucumber} />} >\n                        <FormattedMessage id='insertArticle.button' />\n                    </Button>\n                </Link>\n            </Margin>\n        </PageWrapper>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        insertArticle: (article, tooLongWord) => dispatch(insertAticle(article, tooLongWord)),\n    }\n}\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(injectIntl(InsertArticle));\n","import uid from 'uid'\n\nimport { INSERT_ARTICLE } from './constants'\n\nexport const insertAticle = (article, tooLongWord) => {\n    const wordList = article.split(' ').map(word =>\n        word.length < 30 ? word : tooLongWord)\n    const numberOfPage = Math.ceil(wordList.length / 200)\n\n    return {\n        type: INSERT_ARTICLE,\n        article:{\n            id: uid(15),\n            numberOfPage,\n            wordList\n        }\n    }\n}\n","import styled from 'styled-components'\n\nexport const BadgeWrapper = styled.div`\n    ${({ color }) => `background-color: ${color}`};\n    border-radius: 4px;\n    padding: 4px;\n    cursor: pointer;\n\n    :hover {\n        opacity: 0.9;\n    }\n    :active {\n        opacity: 1;\n    }\n`\n","import React from 'react'\n\nimport { BadgeWrapper } from './styled'\n\nconst Badge = ({ color, ...rest}) => {\n    return (\n        <BadgeWrapper {...rest} color={color} ></BadgeWrapper>\n    )\n}\n\nexport default Badge\n","import styled from 'styled-components'\n\nexport const ArticleWrapper = styled.div`\n    display: flex;\n    flex-flow: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n`\n\nexport const ParagraphWrapper = styled.div`\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    width: 80%\n    justify-content: space-around;\n    padding: 10px;\n`\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { useParams } from \"react-router-dom\";\nimport { Step, StepList } from 'basic-react-steps'\nimport { last, head, find, chunk, fill, lowerCase } from 'lodash'\n\nimport { markWord, readWord } from './action'\n\nimport { PageWrapper, Margin } from 'components/Layouts'\nimport Badge from 'components/Badge';\nimport Button from 'components/Button';\nimport { Arrow } from 'components/Icons';\nimport { ArticleWrapper, ParagraphWrapper } from './styled';\n\nimport { colors } from 'utils';\n\nconst ReadArticle = ({ articleList, markWord, readWord, markedWordList, readWordList }) => {\n    const [currentParagraph, setCurrentParagraph] = useState(0)\n    const { articleId } = useParams()\n    const filteredList = find(articleList, function(article) { return article.id === articleId })\n    const article = filteredList ? head(filteredList) : last(articleList)\n    if (!article) window.location.href = '/'\n    const { numberOfPage, wordList } = article\n    const currentWordList = chunk(wordList, 200)[currentParagraph]\n\n    const nextPage = () => {\n        currentWordList.forEach(word => {\n            const lowerWord = lowerCase(word)\n            !isMarked(lowerWord) && readWord(lowerWord)\n        })\n        setCurrentParagraph(currentParagraph + 1)\n    }\n\n    const previousPage = () => {\n        setCurrentParagraph(currentParagraph - 1)\n    }\n\n    const markWordWithFilter = (word) => {\n        const lowerWord = lowerCase(word)\n        const index = markedWordList.indexOf(lowerWord)\n        index === -1 && markWord(lowerWord)\n    }\n\n    const isMarked = (word) => {\n        const lowerWord = lowerCase(word)\n        const index = markedWordList.indexOf(lowerWord)\n        return index !== -1\n    }\n\n    const isReadWord = (word) => {\n        const lowerWord = lowerCase(word)\n        const index = readWordList.indexOf(lowerWord)\n        return index !== -1\n    }\n\n    return (\n        <PageWrapper flexStart>\n            <StepList stepNumber={currentParagraph}>\n                {fill(Array(numberOfPage)).map((value, index) => <Step key={index} />)}\n            </StepList>\n            <ParagraphWrapper>\n                {currentParagraph !== 0 &&\n                    <Margin right=\"10\">\n                        <Button\n                            height=\"50\"\n                            width=\"50\"\n                            onClick={() => previousPage()}\n                            leftIcon={<Arrow fill={colors.chelseaCucumber} left />} >\n                        </Button>\n                    </Margin>}\n                <ArticleWrapper>\n                    {currentWordList.map((word, index) => {\n                        return (\n                            <Margin key={index} margin=\"2\">\n                                <Badge\n                                    color={(isMarked(word) && colors.chelseaCucumber) || (isReadWord(word) && 'transparent') || colors.purpleColor}\n                                    onClick={() => markWordWithFilter(word)}>{word}</Badge>\n                            </Margin>\n                        )\n                    })}\n                </ArticleWrapper>\n                {(currentParagraph + 1) < numberOfPage &&\n                    <Margin left=\"10\">\n                        <Button\n                            height=\"50\"\n                            width=\"50\"\n                            onClick={() => nextPage()}\n                            rightIcon={<Arrow fill={colors.chelseaCucumber} />} >\n                        </Button>\n                    </Margin>}\n            </ParagraphWrapper>\n        </PageWrapper>\n    )\n}\n\nconst mapStateToProps = ({ articleList, wordLists: { markedWordList, readWordList } }) => ({\n    articleList,\n    markedWordList,\n    readWordList\n})\n\nconst mapDispatchToProps = dispatch => ({\n    markWord: (word) => dispatch(markWord(word)),\n    readWord: (word) => dispatch(readWord(word))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReadArticle);\n","import { MARK_WORD, READ_WORD } from \"./const\";\n\nexport const markWord = (word) => ({\n    type: MARK_WORD,\n    word\n})\n\nexport const readWord = (word) =>({\n    type: READ_WORD,\n    word\n})\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { AppWrapper, Header, Content } from './App.style'\nimport InsertArticle from 'containers/InsertArticle'\nimport ReadArticle from 'containers/ReadArticle';\n\nfunction App() {\n  return (\n    <AppWrapper >\n      <Header>\n        <FormattedMessage id='appName' />\n      </Header>\n      <Content>\n        <Router>\n          <Switch>\n            <Route path='/read/:articleId?' component={ReadArticle} />\n            <Route path='/' component={InsertArticle} />\n          </Switch>\n        </Router>\n      </Content>\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { IntlProvider } from 'react-intl';\n\nimport messages_en from 'translations/en.json'\nimport messages_tr from 'translations/tr.json'\nimport reducers from './reducers'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\nconst messages = {\n    'tr': messages_tr,\n    'en': messages_en\n};\nconst language = navigator.language.split(/[-_]/)[0];\n\nReactDOM.render(\n    <Provider store={store}>\n        <IntlProvider locale={navigator.language} messages={messages[language]}>\n            <App />\n        </IntlProvider>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}